{"version":3,"sources":["webpack:///src/app/pages/customer-orders/customer-orders.page.ts","webpack:///src/app/pages/customer-orders/customer-orders-routing.module.ts","webpack:///src/app/pages/customer-orders/customer-orders.page.html","webpack:///src/app/pages/customer-orders/customer-orders.page.scss","webpack:///src/app/pages/customer-orders/customer-orders.module.ts"],"names":["CustomerOrdersPage","location","route","orderService","router","limit","queryParams","subscribe","params","getCurrentNavigation","extras","state","uid","cid","orderStatus","getCutomerOrders","orders_ref","orderBy","where","get","then","customer_orders","customerOrders","docs","map","order","id","data","total","cart_items","cart_item","food","orders","additional","quantity","price","getFoodTotalPrice","status","cancel_by_cutomer","getValue","cancelOrder","back","selector","template","routes","path","component","CustomerOrdersPageRoutingModule","imports","forChild","exports","CustomerOrdersPageModule","declarations"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAYaA,kBAAkB;AAO7B,oCAAoBC,QAApB,EACoBC,KADpB,EAEoBC,YAFpB,EAGoBC,MAHpB,EAGsC;AAAA;;AAAA;;AAHlB,eAAAH,QAAA,GAAAA,QAAA;AACA,eAAAC,KAAA,GAAAA,KAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AAPpB,eAAAC,KAAA,GAAQ,EAAR;AASE,eAAKH,KAAL,CAAWI,WAAX,CAAuBC,SAAvB,CAAiC,UAAAC,MAAM,EAAI;AACzC,gBAAI,KAAI,CAACJ,MAAL,CAAYK,oBAAZ,GAAmCC,MAAnC,CAA0CC,KAA9C,EAAoD;AAClD,mBAAI,CAACC,GAAL,GAAc,KAAI,CAACR,MAAL,CAAYK,oBAAZ,GAAmCC,MAAnC,CAA0CC,KAA1C,CAAgDC,GAA9D;AACA,mBAAI,CAACC,GAAL,GAAc,KAAI,CAACT,MAAL,CAAYK,oBAAZ,GAAmCC,MAAnC,CAA0CC,KAA1C,CAAgDE,GAA9D;AACD;AACF,WALD;AAMA,eAAKC,WAAL,GAA0B,IAAI,sEAAJ,EAA1B;AACD;;AAnB4B;AAAA;AAAA,iBAqB7B,oBAAW;AACT,iBAAKC,gBAAL;AACD;AAvB4B;AAAA;AAAA,iBAwB7B,4BAAmB;AAAA;;AACjB,gBAAIC,UAAU,GAAG,KAAKb,YAAL,CAAkBY,gBAAlB,CAAmC,KAAKF,GAAxC,CAAjB;AACAG,sBAAU,CAACC,OAAX,CAAmB,YAAnB,EAAgC,MAAhC;AACAD,sBAAU,CAACE,KAAX,CAAiB,KAAjB,EAAuB,IAAvB,EAA4B,KAAKN,GAAjC;AACAI,sBAAU,CAACX,KAAX,CAAiB,KAAKA,KAAtB;AACAW,sBAAU,CAACG,GAAX,GAAiBC,IAAjB,CAAsB,UAACC,eAAD,EAAmB;AACvC,oBAAI,CAACC,cAAL,GAAsBD,eAAe,CAACE,IAAhB,CAAqBC,GAArB,CAAyB,UAAAC,KAAK,EAAE;AACpD,uBAAO;AAAQC,oBAAE,EAACD,KAAK,CAACC;AAAjB,mBAAuBD,KAAK,CAACE,IAAN,EAAvB,CAAP;AACD,eAFqB,CAAtB;AAGD,aAJD;AAKD;AAlC4B;AAAA;AAAA,iBAoC7B,uBAAcF,KAAd,EAAyB;AACvB,gBAAIG,KAAK,GAAU,CAAnB;AACAH,iBAAK,CAACI,UAAN,CAAiBL,GAAjB,CAAqB,UAACM,SAAD,EAAsB;AACzCA,uBAAS,CAACC,IAAV,CAAeC,MAAf,CAAsBR,GAAtB,CAA0B,UAACC,KAAD,EAAmB;AAC3CG,qBAAK,IAAIH,KAAK,CAACQ,UAAN,CAAiBC,QAAjB,GAA4BT,KAAK,CAACQ,UAAN,CAAiBE,KAAtD;AACD,eAFD;AAGAP,mBAAK,IAAME,SAAS,CAACC,IAAV,CAAeI,KAA1B;AACD,aALD;AAMA,mBAAOP,KAAP;AACD;AA7C4B;AAAA;AAAA,iBA+C7B,2BAAkBE,SAAlB,EAAoC;AAClC,mBAAO,KAAK3B,YAAL,CAAkBiC,iBAAlB,CAAoCN,SAApC,CAAP;AACD;AAjD4B;AAAA;AAAA,iBAmD7B,mBAAUL,KAAV,EAAqB;AACnB,gBAAGA,KAAK,CAACY,MAAN,CAAaC,iBAAb,IAAkC,mBAArC,EAAyD;AACvD,qBADuD,CAChD;AACR;;AACD,mBAAO,KAAKxB,WAAL,CAAiByB,QAAjB,CAA0Bd,KAAK,CAACY,MAAN,CAAaA,MAAvC,CAAP;AACD;AAxD4B;AAAA;AAAA,iBA0D7B,qBAAYZ,KAAZ,EAAuB;AACrB,iBAAKtB,YAAL,CAAkBqC,WAAlB,CAA8B,KAAK3B,GAAnC,EAAuCY,KAAvC,EAA8CL,IAA9C,CAAmD,YAAI;AACrDK,mBAAK,CAACY,MAAN,CAAaC,iBAAb,IAAkC,mBAAlC;AACD,aAFD;AAGD;AA9D4B;AAAA;AAAA,iBAgE7B,gBAAI;AACF,iBAAKrC,QAAL,CAAcwC,IAAd;AACD;AAlE4B;;AAAA;AAAA,S;;;;gBAXtB;;gBACA;;gBACA;;gBADgB;;;;AAUZzC,wBAAkB,6DAL9B,gEAAU;AACT0C,gBAAQ,EAAE,qBADD;AAETC,gBAAQ,EAAR,6EAFS;;AAAA,OAAV,CAK8B,GAAlB3C,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPb,UAAM4C,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,+BAA+B;AAAA;AAAA,O;;AAA/BA,qCAA+B,6DAJ3C,+DAAS;AACRC,eAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAI2C,GAA/BH,+BAA+B,CAA/B;;;;;;;;;;;;;;;;AChBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCkBFI,wBAAwB;AAAA;AAAA,O;;AAAxBA,8BAAwB,6DATpC,+DAAS;AACRH,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,+FAJO,CADD;AAORI,oBAAY,EAAE,CAAC,wEAAD,EAAoB,wEAApB,EAAiC,uFAAjC;AAPN,OAAT,CASoC,GAAxBD,wBAAwB,CAAxB","file":"pages-customer-orders-customer-orders-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from 'src/app/services/order.service';\nimport { CartItem, Order, OrderStatus } from 'src/app/objects/cart.model';\nimport { OrderItem } from 'src/app/objects/food-drink-menu.model';\n\n@Component({\n  selector: 'app-customer-orders',\n  templateUrl: './customer-orders.page.html',\n  styleUrls: ['./customer-orders.page.scss'],\n})\nexport class CustomerOrdersPage implements OnInit {\n  private uid:string\n  cid: string;\n  limit = 10;\n  orderStatus: OrderStatus;\n  customerOrders: Order[];\n\n  constructor(private location: Location,\n              private route   : ActivatedRoute,\n              private orderService:OrderService,\n              private router  : Router) {\n\n    this.route.queryParams.subscribe(params => {\n      if (this.router.getCurrentNavigation().extras.state){ \n        this.uid    = this.router.getCurrentNavigation().extras.state.uid; \n        this.cid    = this.router.getCurrentNavigation().extras.state.cid; \n      } \n    });\n    this.orderStatus        = new OrderStatus();\n  }\n\n  ngOnInit() {\n    this.getCutomerOrders();\n  }\n  getCutomerOrders() {\n    let orders_ref = this.orderService.getCutomerOrders(this.cid)\n    orders_ref.orderBy('created_at','desc')\n    orders_ref.where('uid','==',this.uid)\n    orders_ref.limit(this.limit) \n    orders_ref.get().then((customer_orders)=>{\n      this.customerOrders = customer_orders.docs.map(order=>{\n        return <Order>{id:order.id,...order.data()}\n      })\n    })\n  }\n\n  getOrderPrice(order:Order){  \n    let total:number = 0\n    order.cart_items.map((cart_item:CartItem)=>{\n      cart_item.food.orders.map((order:OrderItem)=>{\n        total += order.additional.quantity * order.additional.price\n      })\n      total   += cart_item.food.price;\n    })\n    return total;\n  }\n\n  getFoodTotalPrice(cart_item:CartItem){\n    return this.orderService.getFoodTotalPrice(cart_item)\n  }\n\n  getStatus(order:Order){ \n    if(order.status.cancel_by_cutomer == 'cancel_by_cutomer'){\n      return // siz iptal ettiniz\n    }\n    return this.orderStatus.getValue(order.status.status)\n  }\n\n  cancelOrder(order:Order){\n    this.orderService.cancelOrder(this.cid,order).then(()=>{\n      order.status.cancel_by_cutomer == \"cancel_by_cutomer\";\n    })\n  }\n\n  back(){\n    this.location.back();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CustomerOrdersPage } from './customer-orders.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CustomerOrdersPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CustomerOrdersPageRoutingModule {}\n","export default \"<ion-toolbar> \\n  <ion-tabs>\\n    <ion-tab-bar slot=\\\"top\\\"> \\n      <ion-tab-button (click)=\\\"back()\\\">\\n        <ion-icon name=\\\"chevron-back-outline\\\"></ion-icon>\\n      </ion-tab-button> \\n      <ion-title>Siparişlerim</ion-title>\\n      <ion-tab-button  >\\n         \\n      </ion-tab-button> \\n    </ion-tab-bar> \\n  </ion-tabs>\\n</ion-toolbar>\\n \\n\\n<ion-content>\\n  <!-- herbir order -->\\n  <ion-card *ngFor = \\\"let cOrder of customerOrders\\\" button >\\n    <ion-row>\\n      <ion-col size=\\\"5\\\">\\n        <ion-button *ngIf=\\\"cOrder.account\\\" fill=\\\"clear\\\" size=\\\"small\\\"> \\n          {{ cOrder.account?.displayName }}\\n        </ion-button>\\n        <ion-button *ngIf = \\\"cOrder.shipping_address.name_surname_for_totable\\\" fill=\\\"clear\\\" size=\\\"small\\\"> \\n          {{ cOrder.shipping_address.name_surname_for_totable }}\\n        </ion-button>\\n      </ion-col>\\n      <ion-col size=\\\"4\\\">\\n      </ion-col>\\n      <ion-col size=\\\"3\\\">\\n        <ion-button  (click)=\\\"cancelOrder(cOrder)\\\" *ngIf=\\\"(cOrder.status.status != 'gonderildi' && cOrder.status.cancel_by_cutomer!='cancel_by_cutomer')\\\"   fill=\\\"clear\\\" color=\\\"danger\\\" size=\\\"small\\\">\\n          İptal\\n        </ion-button>\\n        <ion-button disabled *ngIf=\\\"cOrder.status.cancel_by_cutomer=='cancel_by_cutomer'\\\"  fill=\\\"clear\\\" size=\\\"small\\\">\\n          İptal Ettiniz\\n        </ion-button>\\n      </ion-col>\\n      \\n\\n    </ion-row>\\n    <ion-card-content>\\n      <!-- herbir food --> \\n      <div *ngFor=\\\"let item of cOrder.cart_items\\\" style=\\\"margin-top: 10px;\\\">\\n        <div style=\\\"font-weight: bold;font-style: italic;\\\" > </div>\\n        <ion-item lines=\\\"none\\\">\\n          <ion-label>{{item.food.title}}   {{ item.food.price | currencyPipe }}</ion-label> \\n        </ion-item> \\n        <ion-item *ngFor=\\\"let forder of item.food.orders\\\" lines=\\\"none\\\">\\n          <ion-note > \\n            {{forder.additional.name}} \\n            {{forder.additional.price | currencyPipe}} x {{forder.additional.quantity}} =\\n            {{(forder.additional.price * forder.additional.quantity) | currencyPipe}}            \\n          </ion-note> \\n        </ion-item> \\n        <ion-item  lines=\\\"none\\\">\\n          <ion-label color=\\\"medium\\\">Yemek + İlaveler : </ion-label>\\n          <ion-badge color=\\\"medium\\\">{{ getFoodTotalPrice(item) | currencyPipe }}</ion-badge> \\n        </ion-item>\\n      </div><!-- herbir food END-->  \\n\\n      <ion-item lines=\\\"none\\\">\\n        <ion-label> Genel Toplam : </ion-label>\\n        <ion-badge color=\\\"medium\\\">{{ getOrderPrice(cOrder) | currencyPipe }}</ion-badge>\\n      </ion-item>\\n    </ion-card-content> \\n    <ion-row>\\n      <ion-col size=\\\"5\\\">{{ cOrder.created_at | unixTimeToDate: 'date' }} {{ cOrder.created_at | unixTimeToDate: 'hm' }} </ion-col>\\n      <ion-col size=\\\"7\\\">{{ getStatus(cOrder) }} - {{ cOrder.status.created_at | unixTimeToDate: 'hm' }}</ion-col>\\n    </ion-row>\\n  </ion-card> <!-- herbir order END -->\\n</ion-content>\\n\";","export default \"ion-card {\\n  --background: aliceblue;\\n  box-shadow: unset;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2N1c3RvbWVyLW9yZGVycy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSx1QkFBQTtFQUNBLGlCQUFBO0FBQ0oiLCJmaWxlIjoiY3VzdG9tZXItb3JkZXJzLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jYXJkIHtcbiAgICAtLWJhY2tncm91bmQ6IGFsaWNlYmx1ZTsgXG4gICAgYm94LXNoYWRvdzogdW5zZXQ7XG59Il19 */\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms'; \nimport { IonicModule } from '@ionic/angular'; \nimport { CustomerOrdersPageRoutingModule } from './customer-orders-routing.module'; \nimport { CustomerOrdersPage } from './customer-orders.page'; \nimport { CurrencyPipe } from 'src/app/pipes/currency.pipe';\nimport { UnixTimeToDatePipe } from 'src/app/pipes/unix-time-to-date.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    CustomerOrdersPageRoutingModule\n  ],\n  declarations: [CustomerOrdersPage,CurrencyPipe,UnixTimeToDatePipe]\n})\nexport class CustomerOrdersPageModule {}"]}